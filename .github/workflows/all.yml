on:
  push:
    branches:
      - '*'
    tags-ignore:
      - '*'
  pull_request:
  workflow_dispatch:

jobs:
  basics:
    strategy:
      fail-fast: false
      matrix:
        include:

          # Testing fallback when `hello` isn’t implemented
          # (but appendOplogNote is).
          - mongodb_versions: { src: '4.2.5', dst: '6.0', skipHashed: true }
            topology:
              name: replset
              srcConnStr: mongodb://localhost:27020,localhost:27021,localhost:27022
              dstConnStr: mongodb://localhost:27030,localhost:27031,localhost:27032

        mongodb_versions:
        - { src: '4.2', dst: '4.2', skipHashed: true }
        - { src: '4.2', dst: '4.4', skipHashed: true }
        - { src: '4.2', dst: '5.0', skipHashed: true }
        - { src: '4.2', dst: '6.0', skipHashed: true }

        - { src: '4.4', dst: '4.4' }
        - { src: '4.4', dst: '5.0' }
        - { src: '4.4', dst: '6.0' }

        - { src: '5.0', dst: '5.0' }
        - { src: '5.0', dst: '6.0' }
        - { src: '5.0', dst: '7.0' }

        - { src: '6.0', dst: '6.0' }
        - { src: '6.0', dst: '7.0' }
        - { src: '6.0', dst: '8.0' }

        - { src: '7.0', dst: '7.0' }
        - { src: '7.0', dst: '8.0' }

        - { src: '8.0', dst: '8.0' }

        toHashedIndexKey: [true, false]

        topology:
          - name: replset
            srcConnStr: mongodb://localhost:27020,localhost:27021,localhost:27022
            dstConnStr: mongodb://localhost:27030,localhost:27031,localhost:27032

          - name: replset-to-sharded
            dstArgs: --sharded 2
            srcConnStr: mongodb://localhost:27020,localhost:27021,localhost:27022
            dstConnStr: mongodb://localhost:27030

          - name: sharded
            srcArgs: --sharded 2
            dstArgs: --sharded 2
            srcConnStr: mongodb://localhost:27020
            dstConnStr: mongodb://localhost:27030

    # Ubuntu 24 lacks OpenSSL 1.1.1’s libcrypto, which pre-v6 MongoDB
    # versions need.
    runs-on: ubuntu-22.04

    name: ${{ matrix.mongodb_versions[0] }} to ${{ matrix.mongodb_versions[1] }}, ${{ matrix.topology.name }}${{ matrix.toHashedIndexKey && ", hashed doc comparison" || "" }}

    if: ${{!matrix.mongodb_versions.skipHashed || !matrix.toHashedIndexKey}}

    steps:
      - run: uname -a
      - run: ldconfig -p
      - run: lsb_release -a

      - name: Check out repository
        uses: actions/checkout@v4

      - name: Fetch Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Install m and mtools
        run: |-
            {
                echo npm install -g m
                echo pipx install 'mtools[all]'
            } | parallel

      - name: Install MongoDB ${{ matrix.mongodb_versions.src }} (source)
        run: yes | m ${{ matrix.mongodb_versions[0] }} && dirname $(readlink $(which mongod)) > .srcpath

      - name: Install MongoDB ${{ matrix.mongodb_versions.dst }} (destination)
        run: yes | m ${{ matrix.mongodb_versions[1] }} && dirname $(readlink $(which mongod)) > .dstpath

      - name: Install latest stable MongoDB (metadata)
        run: yes | m stable && dirname $(readlink $(which mongod)) > .metapath

      - name: Build migration-verifier & start clusters
        run: |-
            {
                echo ./build.sh
                echo mlaunch init --binarypath $(cat .srcpath) --port 27020 --dir src --replicaset ${{ matrix.topology.srcArgs }}
                echo mlaunch init --binarypath $(cat .dstpath) --port 27030 --dir dst --replicaset ${{ matrix.topology.dstArgs }}
                echo mlaunch init --binarypath $(cat .metapath) --port 27040 --dir meta --replicaset --nodes 1
            } | parallel

      - name: Test
        run: go test -v ./... -race
        env:
          MVTEST_DOC_COMPARISON_METHOD: ${{matrix.toHashedIndexKey && 'toHashedIndexKey' || ''}}
          MVTEST_SRC: ${{matrix.topology.srcConnStr}}
          MVTEST_DST: ${{matrix.topology.dstConnStr}}
          MVTEST_META: mongodb://localhost:27040
